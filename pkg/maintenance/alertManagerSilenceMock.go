// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/managed-upgrade-operator/pkg/maintenance (interfaces: AlertManagerSilence)

// Package maintenance is a generated GoMock package.
package maintenance

import (
	strfmt "github.com/go-openapi/strfmt"
	gomock "github.com/golang/mock/gomock"
	silence "github.com/prometheus/alertmanager/api/v2/client/silence"
	models "github.com/prometheus/alertmanager/api/v2/models"
	reflect "reflect"
)

// MockAlertManagerSilence is a mock of AlertManagerSilence interface
type MockAlertManagerSilence struct {
	ctrl     *gomock.Controller
	recorder *MockAlertManagerSilenceMockRecorder
}

// MockAlertManagerSilenceMockRecorder is the mock recorder for MockAlertManagerSilence
type MockAlertManagerSilenceMockRecorder struct {
	mock *MockAlertManagerSilence
}

// NewMockAlertManagerSilence creates a new mock instance
func NewMockAlertManagerSilence(ctrl *gomock.Controller) *MockAlertManagerSilence {
	mock := &MockAlertManagerSilence{ctrl: ctrl}
	mock.recorder = &MockAlertManagerSilenceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAlertManagerSilence) EXPECT() *MockAlertManagerSilenceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockAlertManagerSilence) Create(arg0 models.Matchers, arg1, arg2 strfmt.DateTime, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockAlertManagerSilenceMockRecorder) Create(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAlertManagerSilence)(nil).Create), arg0, arg1, arg2, arg3, arg4)
}

// Delete mocks base method
func (m *MockAlertManagerSilence) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockAlertManagerSilenceMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAlertManagerSilence)(nil).Delete), arg0)
}

// List mocks base method
func (m *MockAlertManagerSilence) List(arg0 []string) (*silence.GetSilencesOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(*silence.GetSilencesOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockAlertManagerSilenceMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAlertManagerSilence)(nil).List), arg0)
}
